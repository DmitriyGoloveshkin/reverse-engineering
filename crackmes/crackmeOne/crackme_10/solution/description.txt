Задачка забористая! Много всего интересного и познавательного.

Постараюсь не растягивать, а писать по существу. Максимально подробно опишу все,
что происходить в процессе выполнения задачи.

В данном исполняемом файле в разделе ресурсов живет еще одна программа, которая
"разворачивается" вручную в памяти процесса и получает управление.

Так, начнем с самого начала. Первым делом вызываются API-шные функции для
обработки ресурсов: 
	- FindResourceW
	- SizeofResource
	- LoadResource
	- VirtualAlloc
После чего управление передаются в только что скопированный код.

Здесь я разделю описание на 2 части. Первая из которых - подготовка кода к 
выполнению. Вторая - реализация логики (ввод и обработка пользовательского 
пароля).


--------------------------------------------------------------------------------
ЧАСТЬ ПЕРВАЯ
--------------------------------------------------------------------------------
1. По зараннее вычисленным контрольным суммам названий функций определяются 
адреса LdrLoadDll и LdrGetProcedureAddress. Адреса нашли, спрятали для 
дальнейшего вызова.

2. Вызов LdrLoadDll. Не совсем понял, для чего это делается, т.к. первые два 
аргумента обнулили перед вызовом.

3. С помощью LdrGetProcedureAddress через захардкоженные значения опционалов
находим адреса функций:
	- Sleep
	- LoadLibraryA
	- VirtualProtect
	- FlushInstructionCach
	- GetNativeSystemInfo
	- RtlAddFunctionTable

4. Проверка успешности поиска адресов.

5. Обработка PE заголовка:
	- адрес PE заголовка;
	- сигнатура PE заголовка;
	- сигнатура поля 'machine';
	- обработка SectionAlignment;
	- обработка SizeOptionalHeader;

6. Обработка (описателей?) секций. Обошли все секции, посчитали требуемый размер
виртуальной памяти.

7. GetNativeSystemInfo -> Проверили... Не помню, что именно. Скорее всего, это
не было чем-то интересным/важным.

8. VirtualAlloc -> резервируем виртуальную память для нашего файла. Требуемый 
размер памяти определен.

9. Копирование заголовков (DOS, PE) в память.

10. В цикле копируем секции в память. 

11. Нашли таблицу импорта?.. Запомнили ее адрес.

12. Загрузили в адресное пространство KERNEL32.DLL и настроили адреса (?) в
таблице импорта.

13. Раздали секциям атрибуты через VirtualProtect.

14. FlushInstructionCache.
(MSDN: Applications should call FlushInstructionCacheif they generate or modify
code in memory. The CPU cannot detect the change, and may execute the old code
it cached.) 

15. RtlAddFucntionTable -> настроили таблицу исключений для новой программы (?). 

На данном этапе новая программа полностью готова к выполнению. Здесь ей
передается управление.


--------------------------------------------------------------------------------
ЧАСТЬ ВТОРАЯ
--------------------------------------------------------------------------------
1. В стек помещаются константные значения. 
	- 16 байт в [rsp+70,74,78,7C] -> XOR_VAL_1; 
	- 16 байт в [rsp+30,34,38,3C] -> XOR_VAL_2; 
	- 128 байт в [rbp-4, 80];

2. Обнулили 256 байт.

3. Расшифровали через XOR-ы сообщение "FLAG: ", которое выводится на экран для 
приглашения ввода пароля.

4. Запрашивается ввод со строкой формата "%64s". Робкие намеки на пароль из 64
символов :)

5. Через хитрую комбинацию действий и строки "Yuriii" расшифровыается строка 
"IsDebuggerPresent". Да, анти-отладка никуда не делась, она тут используется.
Также используется фукнция NtQueryInformationProcess.
Ловким движением рук подгоняем возвращаемые значения антиотладочных функций в 
нужное русло.

А дальше начинается обработка и проверка пароля. 

6. Копирование 16 байт константных данных в новое место.

7. Начинаем XOR-ить введенный пароль со значениями (0x00, 0x01,.., 0x0e, 0x0f). 
Обрабатываем первые 16 байт. XOR-им линейно подряд 16 байт.

8. Продолжаем XOR-ить 16 байт пароля со значениями XOR_VAL_1. Тут уже вложенные 
циклы, в каждом по 4 итерации.

9. Заменить модифицированные байты пользовательского пароля:
user_password[i] = (r10+user_password[i])
r10 - массив с некоторыми константными занчениями.

10. "Перемешиваем" полученные байты.

11. Выполняем различные математические операции над полученной 
последовательностью байт.

12. XOR-им еще раз наши 16 байт с какими-то константами.

13. Повторить п.7-12 еще 3 раза. Итого получается 64 байта.

14. Еще раз меняем значения полученной последовательности. На этот раз так:
(r15 + rsi + 0x0A0).

15. Теперь снова XOR-им, но уже 0x80 байт. Не совсем понял, чем являются лишние
64 байта.

16. А теперь проверяем правильность введеннго пароля. Делается это с помощью
memcmp. Тут все стандартно.

17. В зависимости от возвращенного занчения из memcmp расшифровывается сообщение
об успехе/неудаче и выводится на экран.


Такая задача. Много всякого. Пароль я подбирать не рискнул, хоть и промелькнула 
в голове мысль, что пароль - это не 1 строка из 64 байт, а 4 строки по 16 байт.
Если это действительно так, задача по нахождению пароля значительно упрощатся.
Считаю, заявленная сложность в 4.5 баллов близка к реальности.
