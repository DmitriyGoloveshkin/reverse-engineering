При запуске программы на экране отображается строка "Enter key:" и программа
ожидает ввода от пользователя. При вводе строки из 4 символов на экране 
отобразилась строка: "No more" и ожидается нажатие любой клавиши для завершения
программы.

При исследовании программы выяснил, что требуемая длина пароля - 16  символов.
После ввода пароля из 16 символов на экране появляется строка: "Wrong key!"

Теперь вкратце опишу, что происходит в программе.
Перед выводом на экран сообщения о вводе ключа вызываеися функция 'sub_D52E80',
которая устанавливает константную последовательность инт-овых значений по адресу,
присвоенному ecx-y: 
{0x0, 0x2, 0x1, 0x4, 0x3, 0xf, 0x5, 0x6, 0x7, 0x9, 0x8, 0xa, 0xb, 0xc, 0xe, 0xd}
Пока совсем непонятно, что с ней делать. СПОЙЛЕР: она будет использоваться
позже. Далее на экран отображается сообщение о вводе пароля и ожидается ввод от 
пользователя. После ввода пароля проверяется его длина, если она не равна 16, то
программа завершается с сообщением "No more". 

Теперь начинается выполнение достаточно большого блока кода, подробно описывать 
его не буду, расскажу, к чему приводит выполнение этого блока:
Формируются 4 массива, в каждом по 16 инт-овых значений. 
МАССИВ_1: инт-овые значения символов пароля;
МАССИВ_2: значения старших разрядов символов пароля;
МАССИВ_3: тут немного интереснее. Если значение символа >=100, то очередной
		  элемент = 0, иначе элемент = младшему разряду.
МАССИВ_4: тут тоже немного интересно: Если значение символа >=100, то очередной
		  элемент = значение символа - 100, иначе элемент = 2;

После этого формируется еще одна последовательность на основе первой, 
вышеописанной. Так значение новой последовательности имеет вид:
{0x0, 0x2, 0x2, 0x2, 0x3, 0xf, 0x4, 0x4, 0x3, 0x3, 0xf, 0xa, 0xb, 0xc, 0x6, 0x6}

После формирования 4 массивов и новой последовательности продолжаются действия
со значениями элементов массивов. Так, сначала вычисляется некоторая сумма,
которая тоже массив. Назову ее Контрольной Суммой для МАССИВА_2 и МАССИВА_3
(далее КС_2_3). Формируется она так: 
КС_2_3[i] = МАССИВ_2[первая послед-ть[i]] + МАССИВ_3[новая послед-ть[i]].
Скажу, что дальше КС_2_3 не используется.

По похожему сценарию определяется Контрольная Сумма для МАССИВА_3 и МАССИВА_4
(далее КС_3_4). Формируется она так: 
КС_3_4[i] = МАССИВ_3[первая послед-ть[i]] + МАССИВ_4[новая послед-ть[i]].
Именно этот массив далее используется для валидации введенного ключа.

Теперь настало время для формирования еще двух последовательностей: первая из
них - массив из 16 элементов. Каждый элемент == 3. Так же с помощью xmm-ов 
создается еще одна последовательность. Ее значение:
{0x7, 0xe, 0x6, 0x5, 0xc, 0xe, 0xb, 0xb, 0x5, 0x5, 0x6, 0x5, 0x3, 0x5, 0xd, 0xd}
Назовем ее valid_value.

После всех этих действий плавно переходим к непосредственно валидации пароля.
Коротко: КС_3_4[i] + 3 == valid_value[i]. Если это условие выполняется, то на 
экране отображается сообщение "Good work! Key: <введенный пароль>". 

О решении.
Можно написать keygen, который будет в лоб перебирать строки из 16 элементов.
Сложного ничего нет, все условия известны и совсем не вычурны. Перебор из 16
элементов достаточно долог. Можно пойти другим путем и попробовать немного
упростить подбор пароля. Если нарисовать описанные условия на бумаге, то для
нескольких значений правильные символы определяются слету. Можно на этом 
остановиться и добрутфорсить только те символы, которые сходу не ясны.
Я немного подумал и подобрал валидный ключ вручную (мне понравилось, в голове
что-то заскрипело!).

В общем, один из вариантов валидного ключа такой: "RQYWdXXZQZZdZXXY"

Отзыв на crackme-шку: очень интересная задачка. Понравилось, что программа не 
содержит названий функций, заданных автором. Все функции называла IDA. Так же
есть отличная возможность потрограть XMM-ы.
